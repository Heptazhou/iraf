.help mode Dec85 images
.ih
NAME
mode -- modal filter a set of images
.ih
USAGE
mode input output xwindow ywindow
.ih
PARAMETERS
.ls input
List of input images.
.le
.ls output
List of filtered images. The number of input images must be the same as
the number of output images. If the input image name is the same as the
output image name the original image is replaced by the filtered image.
.le
.ls xwindow, ywindow
The size of the modal filter where both xwindow and ywindow are
odd integers. If either x window or ywindow are even they will be rounded
up to the nearest odd integer. The filter kernel must be less than
65 * 65 pixels in length.
.le
.ls boundary = "nearest"
The type of boundary extension. The options are:
.ls nearest
Use the value of the nearest boundary pixel.
.le
.ls constant
Use a constant value.
.le
.ls reflect
Reflect pixel values around the boundary.
.le
.ls wrap
Wrap pixel values around the boundary.
.le
.le
.ls constant = 0.
The value for constant value boundary extension.
.le
.ih
DESCRIPTION

MODE takes a set of IRAF images \fIinput\fR and produces a set of filtered
images \fIoutput\fR. The modal filter consists of a sliding
rectangular window  of dimensions \fIxwindow\fR
by \fIywindow\fR in which the
center pixel of the window is replaced by the mode of all the pixels in the
window where the mode of a sequence of numbers is defined as follows.

.nf
		mode = 3. * median - 2. * mean
.fi

Out of bounds
pixel references are handled by setting the parameter \fIboundary\fR.

.ih
EXAMPLES

1. Modal filter an image using a 5 by 5 window and nearest pixel boundary
extension.

   cl> mode m74 m74.5by5 5 5

2. Modal filter an image using a 3 by 3 window and constant boundary
extension.

   cl> mode m74 m74.5by5 3 3 boun=const const=0.

.ih
TIME REQUIREMENTS
Mode requires approximately 330 and 600 cpu seconds to filter a 512 by
512 real image using a 5 by 5 and 7 by 7 filter window respectively
(Vax 11/750 fpa).
.ih
BUGS
The filter kernel has been restricted to 65 by 65 pixels. This permits the
use of static arrays and improves the running time of the program by
approximately 30%.

The sort routine for the smaller kernels has been optimized. It may be
desirable to optimize higher order kernels in future.

The IRAF task FMODE is significantly more efficient than MODE
and should be used if the data can be quantized.
.ih
SEE ALSO
fmode
.endhelp
