include <imhdr.h>

$for (r)

# IMABS -- Take the absolute value of pixels in image1 and write to image2.

procedure imabs$t (im1, im2)

pointer	im1				# Input IMIO pointer
pointer	im2				# Output IMIO pointer

int	npix
pointer	buf1, buf2
long	v1[IM_MAXDIM], v2[IM_MAXDIM]
int	imgnl$t(), impnl$t()

begin
	call amovkl (long(1), v1, IM_MAXDIM)
	call amovkl (long(1), v2, IM_MAXDIM)

	npix = IM_LEN(im1, 1)

	while ((imgnl$t (im1, buf1, v1) != EOF) &&
	    (impnl$t (im2, buf2, v2) != EOF))
	    call aabs$t (Mem$t[buf1], Mem$t[buf2], npix)
end


# IMLOG -- Take log of pixels in image1 and write to image2

procedure imlog$t (im1, im2)

pointer	im1				# Input IMIO pointer
pointer	im2				# Output IMIO pointer

int	npix
pointer	buf1, buf2
long	v1[IM_MAXDIM], v2[IM_MAXDIM]

PIXEL	errlog$t()
extern	errlog$t()
int	imgnl$t(), impnl$t()

begin
	call amovkl (long(1), v1, IM_MAXDIM)
	call amovkl (long(1), v2, IM_MAXDIM)

	npix = IM_LEN(im1, 1)

	while ((imgnl$t (im1, buf1, v1) != EOF) &&
	    (impnl$t (im2, buf2, v2) != EOF))
	    call alog$t (Mem$t[buf1], Mem$t[buf2], npix, errlog$t)
end

PIXEL procedure errlog$t (x)

PIXEL	x

begin
	return (0$f)
end


# IMSQR -- Take the square root of pixels in image1 and write to image2.

procedure imsqr$t (im1, im2)

pointer	im1				# Input IMIO pointer
pointer	im2				# Output IMIO pointer

int	npix
pointer	buf1, buf2
long	v1[IM_MAXDIM], v2[IM_MAXDIM]

PIXEL	errsqr$t()
extern	errsqr$t()
int	imgnl$t(), impnl$t()

begin
	call amovkl (long(1), v1, IM_MAXDIM)
	call amovkl (long(1), v2, IM_MAXDIM)

	npix = IM_LEN(im1, 1)

	while ((imgnl$t (im1, buf1, v1) != EOF) &&
	    (impnl$t (im2, buf2, v2) != EOF))
	    call asqr$t (Mem$t[buf1], Mem$t[buf2], npix, errsqr$t)
end


PIXEL procedure errsqr$t (x)

PIXEL	x

begin
	return (0$f)
end


# IMDEX -- Take DEX of pixels in image1 and write to image2

procedure imdex$t (im1, im2)

pointer	im1				# Input IMIO pointer
pointer	im2				# Output IMIO pointer

int	npix
pointer	buf1, buf2
long	v1[IM_MAXDIM], v2[IM_MAXDIM]
int	imgnl$t(), impnl$t()

begin
	call amovkl (long(1), v1, IM_MAXDIM)
	call amovkl (long(1), v2, IM_MAXDIM)

	npix = IM_LEN(im1, 1)

	while ((imgnl$t (im1, buf1, v1) != EOF) &&
	    (impnl$t (im2, buf2, v2) != EOF))
	    call adex$t (Mem$t[buf1], Mem$t[buf2], npix)
end


# ADEX -- Take the DEX of a vector.

procedure adex$t (a, b, n)

PIXEL	a[n]
PIXEL	b[n]
int	n

int	i

begin
	do i = 1, n
	    b[i] = 10. ** a[i]
end
$endfor
