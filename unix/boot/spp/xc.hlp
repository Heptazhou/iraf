.help xc Oct89 softools
.ih
NAME
xc -- portable IRAF compile/link utility
.ih
USAGE
xc [flags] files
.ih
FLAGS
.ls 10 -c
Tells \fIxc\fR not to link, i.e., not to create an executable.
.le
.ls 10 -d
Causes debug messages to be printed during execution.
.le
.ls 10 -F, -f
Do not delete the Fortran translation of an SPP source file.
.le
.ls 10 -g
Generates debugging information.
.le
.ls 10 -h
Causes the executable to be linked as a host program, i.e., without the
IRAF main and without searching the IRAF libraries, unless explicitly
referenced on the command line.  Used to compile and link host (e.g., Fortran)
programs which may or may not reference the IRAF libraries.
.le
.ls 10 -H
Link a host program as with "-h", but include the VOS libraries.
.le
.ls 10 -A
Force architecture specific include files.
.le
.ls 10 -C
Link a host program which has a C main.  We may need to tweak the
command line as a special case here since we normally assume Fortran
sources.
.le
.ls 10 -/\fIflag\fR, -//\fIfoo\fR
Pass \fIflag\fR to host compiler without further
interpretation. "-/\fIflag\fR" becomes "-\fIfoo\fR", "-//\fIfoo\fR"
becomes "\fIfoo\fR".
.le
.ls 10 -D\fIdefine\fR
Pass a -D\fIdefine\fR flag on to the host compiler.
.le
.ls 10 -I\fIdir\fR
Pass a -I\fIdir\fR flag on to the host compiler.  A special case is
"-Inolibc" which disables automatic inclusion of the IRAF LIBC
includes (hlib$libc).
.le
.ls 10 -l\fIlib\fR, -L\fIdir\fR
This tells the linker which library files or library directories
besides the standard ones to include.  These must be either on the current
directory, or in an IRAF system library (lib$ or hlib$).
The library specification must be immediately after the option as in
"-lxtools".  No other option may follow the 'l' option in the same
argument as in -lxtoolsO.
.le
.ls 10 -N
Generates the output temp file in /tmp during the link, then moves it
to the output directory in one operation when done.  For cases such as
linking in an NFS-mounted directory, where all the NFS i/o may slow
the link down excessively.
.le
.ls 10 -Nh [filename]
This tells xpp that the foreign definitions in the
file specified should be used in preference to
standard include files.	
.le
.ls 10 -o
This flag redirects the output of the compile if used in
conjunction with -c option or specifies where the executable
or object is to be placed.  If not given the first file
name is used to obtain the name for the executable or
object.
.le
.ls 10 -O
Optimize object code produced; this is now the default, but this switch
is still provided for backwards compatibility.
.le
.ls 10 -p pkgname
Load the package environment for the named external package, e.g.,
"xc -c -p noao file.x".  If the same package is always specified
the environment variable or logical name PKGENV may be defined at the
host level to accomplish the same thing.  The package name \fImust\fR
be specified when doing software development in an external or layered
package.
.le
.ls 10 -q
Disable optimization.  Opposite of -O.  Object code will be optimized
by default.
.le
.ls 10 -s
Strips all symbols and debugging information.
.le
.ls 10 -v
Verbose mode.  Causes messages to be printed during execution telling
what the \fIxc\fR program is doing.
.le
.ls 10 -w
Suppress warnings.				
.le
.ls 10 -x
Compile and link for debugging.
.le
.ls 10 -z
Create a non-shareable image (default).
.le
.ls 10 -V
Print XC version identification.
.le
.ih
DESCRIPTION
XC is a machine independent utility for compiling and linking IRAF
tasks or files.  The XC utility may also be used to compile and/or
link non-IRAF files and tasks. It can be used to generate fortran from
xpp or ratfor code, to compile any number of files, and then link them
if desired.  XC accepts and maps IRAF virtual filenames, but since it
is a standalone bootstrap utility the environment is not passed, hence
logical directories cannot be used.

It is suggested that everyone stick with the iraf virtual file name extensions.
These are : .x, .r, .f, .c, .s, .o, .a, .e.
The meaning of these is:

.ks
.nf
     .x  SPP code
     .r  Ratfor code
     .f  Fortran code
     .c  C code
     .s  Macro assembler code
     .o  Object module
     .a  Library file
     .e  Executable Image
.fi
.ke

XC is available both in the CL and as a standalone task.
Usage is equivalent in either case.
.ih
EXAMPLES

1. Compile and link the source file "mytask.x" to produce the executable
"mytask.e".

.nf
	cl> xc mytask.x
.fi

2. Translate the file "file.x" into Fortran.

.nf
	cl> xc -f file.x
.fi

3. Compile but do not link "mytask.x" and the support file "util.x".

.nf
	cl> xc -c file.x util.x
.fi

4. Now link these for debugging.

.nf
	cl> xc -x file.o util.o
.fi

5. Link the same files without the VMS debug stuff, but link in the library
-ldeboor (the DeBoor spline routines) as well.

.nf
	cl> xc file.o util.o -ldeboor
.fi

XC is often combined with \fImkpkg\fR to automatically maintain large packages
or libraries.
.ih
SEE ALSO
mkpkg, generic
.endhelp
